TaskId,Title,Type,PostingDate,RegistrationStartDate,RegistrationEnddate,SubmissionEnddate,Status,NumOfRegistrations,NumOfSubmisisons,Platforms,Technologies,DetailRequirements,TotalPrize,Duration ( days)
30056960,SRM 711 Editorials Contest - Div I - Easy - ConsecutiveOnes,First2Finish,2017-03-25T07:09:00.000-04:00,2017-03-25T05:09:00.000-06:00,2017-04-24T05:09:00.000-06:00,2017-04-24T05:15:00.000-06:00,Completed,4,2,Other,Other,"<p><strong>CHALLENGE OVERVIEW</strong></p>  <div>Welcome to SRM Editorial Challenge! You can now write an Editorial for the SRM &nbsp;and get featured on the blog; Win a Topcoder Editor T Shirt and yes Cash Prize too.<br /> <br /> <strong>DETAILED REQUIREMENTS</strong><br /> In this challenge you are required to write an editorial for the SRM 711 problem <a href=""https://community.topcoder.com/stat?c=problem_statement&amp;pm=14558"">ConsecutiveOnes</a> . Your submission should adhere to the submission guidelines mentioned below.<br /> &nbsp; <h2>Problem Statement</h2>  <div>You are given a&nbsp;<strong>n</strong>. You are also given an&nbsp;<strong>k</strong>&nbsp;that is a positive integer between 1 and 50; inclusive. Find and return the smallest m such that:  <ul> 	<li>m is greater than or equal to&nbsp;<strong>n</strong><br /> 	the binary representation of m contains (at least)&nbsp;<strong>k</strong>&nbsp;consecutive ones</li> </ul> </div>  <div> <h2>Constraints</h2>  <div> <div>-&nbsp;<strong>n</strong>&nbsp;will be beween 0 and 2^50 - 1; inclusive.</div> </div>  <div> <div>-&nbsp;<strong>k</strong>&nbsp;will be between 1 and 50; inclusive.</div> </div> </div>  <div> <h2>Examples</h2>  <div>0) <div> <div>1</div> </div>  <div> <div>2</div> </div>  <div> <div>Returns: 3</div> </div>  <div> <div>We want the smallest integer that is at least 1 and contains 2 consecutive ones in binary. Clearly the smallest such integer is 3.</div> </div> </div>  <div><br /> 1) <div> <div>5</div> </div>  <div> <div>2</div> </div>  <div> <div>Returns: 6</div> </div>  <div> <div>The binary representation of the number 5 is 101; which does not contain two consecutive ones. The next integer is 6; which is 110 in binary. As this does contain two consecutive ones; the correct return value is 6.</div> </div> </div>  <div><br /> 2) <div> <div>7</div> </div>  <div> <div>2</div> </div>  <div> <div>Returns: 7</div> </div> </div>  <div><br /> 3) <div> <div>364269800189924</div> </div>  <div> <div>33</div> </div>  <div> <div>Returns: 364273356242943</div> </div> </div> </div> &nbsp;  <div>This problem statement is the exclusive and proprietary property of TopCoder; Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder; Inc. is strictly prohibited. (c)2003; TopCoder; Inc. All rights reserved.</div> <br /> <br /> <strong>PRIZES</strong><br /> ---Topcoder Editor T-shirt. If your editorial is published<br /> ---Additional cash prizes; once your count of published editorials reaches 10. Please refer below.<br /> ---First 10 editorials published; a crash prize of $50.<br /> ---Next 15 editorials published; a crash prize of $100.<br /> <br /> Once your count of published editorials reaches 25 we will reset the count to 0.</div> ",0,30
30056959,SRM 711 Editorials Contest - Div II - Hard - TreeMovingDiv2,First2Finish,2017-03-25T07:15:00.000-04:00,2017-03-25T05:15:00.000-06:00,2017-04-24T05:15:00.000-06:00,2017-04-24T05:21:00.000-06:00,Completed,2,3,Other,Other,"<div> <p><strong>CHALLENGE OVERVIEW</strong></p>  <div>Welcome to SRM Editorial Challenge! You can now write an Editorial for the SRM &nbsp;and get featured on the blog; Win a Topcoder Editor T Shirt and yes Cash Prize too.<br /> <br /> <strong>DETAILED REQUIREMENTS</strong><br /> In this challenge you are required to write an editorial for the SRM 711 problem <a href=""https://community.topcoder.com/stat?c=problem_statement&amp;pm=14556"">TreeMovingDiv2</a> &nbsp;. Your submission should adhere to the submission guidelines mentioned below.  <h2>Problem Statement</h2>  <div>You are given m trees. The trees are labeled T(0) through T(m-1). Each tree contains&nbsp;<strong>n</strong>&nbsp;vertices labeled 0 through&nbsp;<strong>n</strong>-1. A cyclic rotation of edges is the following procedure:  <ol> 	<li>In each tree you choose one of its edges. Let e(i) be the edge chosen in the tree T(i).<br /> 	You remove the chosen edge from the tree; producing a graph with&nbsp;<strong>n</strong>&nbsp;vertices and only&nbsp;<strong>n</strong>-2 edges.<br /> 	For each valid i; you add the edge e(i) to the tree T(i+1). Also; you add the edge e(m-1) to the tree T(0). For example; if e(0) was an edge that connected vertices 4 and 7 in T(0); the graph T(1) will now get a new edge that connects its vertices 4 and 7.<br /> 	The procedure was successful if and only if each T(i) is a tree again.</li> </ol> Count all possible ways in which we can successfully perform a cyclic rotation of edges. Return that count modulo (10^9 + 7). You are given the&nbsp;<strong>n</strong>. You are also given the s&nbsp;<strong>roots</strong>;&nbsp;<strong>a</strong>;&nbsp;<strong>b</strong>; and&nbsp;<strong>c</strong>; each with m elements. These are inputs to a pseudorandom generator that will produce the trees. In order to generate the tree T(i); we will first generate a temporary sequence X:  <pre> X[0] = c[i] for k = 1 to n-2:     X[k] = (a[i] * X[k - 1] + b[i]) modulo 1;000;000;007 </pre> and then we use that sequence to generate the edges of the tree:  <pre> for j = 0 to n-2:     u[j] = (roots[i] + j + 1) modulo n     v[j] = (roots[i] + (X[j] modulo (j + 1))) modulo n     add the edge between u[j] and v[j] to the tree T(i) </pre> </div>  <h2>Limits</h2>  <div> <div>Time limit (s):</div> &nbsp;  <div>2.000</div> </div>  <div> <div>Memory limit (MB):</div> &nbsp;  <div>512</div> </div>  <div> <h2>Notes</h2>  <div> <div>- The author&#39;s solution does not depend on any properties of the pseudorandom generator. It would solve any input of the allowed size within the given limits.</div> </div> </div>  <div> <h2>Constraints</h2>  <div> <div>-&nbsp;<strong>n</strong>&nbsp;will be between 2 and 50; inclusive.</div> </div>  <div> <div>-&nbsp;<strong>roots</strong>&nbsp;will contain between 2 and 50 elements; inclusive.</div> </div>  <div> <div>-&nbsp;<strong>a</strong>&nbsp;and&nbsp;<strong>roots</strong>&nbsp;will contain the same number of elements.</div> </div>  <div> <div>-&nbsp;<strong>b</strong>&nbsp;and&nbsp;<strong>roots</strong>&nbsp;will contain the same number of elements.</div> </div>  <div> <div>-&nbsp;<strong>c</strong>&nbsp;and&nbsp;<strong>roots</strong>&nbsp;will contain the same number of elements.</div> </div>  <div> <div>- Each element of&nbsp;<strong>roots</strong>&nbsp;will be between 0 and&nbsp;<strong>n</strong>&nbsp;- 1; inclusive.</div> </div>  <div> <div>- Each element of&nbsp;<strong>a</strong>&nbsp;will be between 1 and 1;000;000;006; inclusive.</div> </div>  <div> <div>- Each element of&nbsp;<strong>b</strong>&nbsp;will be between 0 and 1;000;000;006; inclusive.</div> </div>  <div> <div>- Each element of&nbsp;<strong>c</strong>&nbsp;will be between 0 and 1;000;000;006; inclusive.</div> </div> </div>  <div> <h2>Examples</h2>  <div>0) <div> <div>3</div> </div>  <div> <div>{0; 2}</div> </div>  <div> <div>{1; 2}</div> </div>  <div> <div>{1; 0}</div> </div>  <div> <div>{3; 5}</div> </div>  <div> <div>Returns: 2</div> </div>  <div> <div>There are two trees; each of them contains 3 vertices. The tree T(0) is generated as follows: <ol> 	<li>X[0] = c[0] = 3<br /> 	X[1] = (a[0] * X[0] + b[0]) modulo 1;000;000;007 = 4<br /> 	u[0] = (roots[0] + 1) modulo n = 1<br /> 	v[0] = (roots[0] + (X[0] modulo 1)) modulo n = 0<br /> 	u[1] = (roots[0] + 2) modulo n = 2<br /> 	v[1] = (roots[0] + (X[1] modulo 2)) modulo n = 0</li> </ol> Hence; the tree T(0) contains the edges 1-0 and 2-0.  <p>The tree T(1) contains the edges 0-2 and 1-2.</p> There are two ways to do a successful cyclic rotation of edges: we can either choose the edge 0-2 in each tree; or we can choose the edge 0-1 in T(0) and the edge 1-2 in T(1).</div> </div> </div>  <div><br /> 1) <div> <div>3</div> </div>  <div> <div>{0; 0; 1}</div> </div>  <div> <div>{6; 1; 3}</div> </div>  <div> <div>{6; 5; 5}</div> </div>  <div> <div>{2; 5; 9}</div> </div>  <div> <div>Returns: 2</div> </div>  <div> <div> <p>T(0) contains edges 1-0 and 2-0.</p>  <p>T(1) contains edges 1-0 and 2-0.</p>  <p>T(2) contains edges 2-1 and 0-1.</p> </div> </div> </div>  <div>2) <div> <div>5</div> </div>  <div> <div>{0; 1; 1; 1; 2}</div> </div>  <div> <div>{7; 4; 7; 9; 2}</div> </div>  <div> <div>{8; 3; 9; 5; 3}</div> </div>  <div> <div>{6; 0; 1; 5; 9}</div> </div>  <div> <div>Returns: 22</div> </div> </div>  <div><br /> 3) <div> <div>2</div> </div>  <div> <div>{1; 0; 0}</div> </div>  <div> <div>{122064284; 9662111; 120616497}</div> </div>  <div> <div>{20137061; 408976122; 494878172}</div> </div>  <div> <div>{242061783; 603049107; 805670429}</div> </div>  <div> <div>Returns: 1</div> </div>  <div> <div>Watch out for integer overflow when generating the temporary sequence X.</div> </div> </div>  <div><br /> 4) <div> <div>15</div> </div>  <div> <div>{11; 3; 13; 5; 0; 3; 0; 8; 9; 4; 9; 7; 5; 12; 12; 11; 12; 2; 6; 5; 13; 13; 11; 8; 14; 9; 2; 0; 3; 11; 10; 12; 10; 11; 11; 12; 13; 7; 12; 11; 2; 14; 8; 3; 6; 6; 4; 13; 5; 8}</div> </div>  <div> <div>{983816220; 620877501; 728957664; 719453482; 891241034; 959047323; 459235325; 188837384; 749336264; 40650017; 404049008; 121578182; 640967952; 444329307; 181115164; 697849277; 12923013; 711014676; 308063158; 403714366; 341206103; 674610097; 743172147; 27978413; 95548595; 93823839; 844476902; 863583697; 568069127; 618319911; 659846531; 341309147; 735202433; 531047579; 967335611; 311192666; 753647731; 36420180; 609571991; 208600401; 915548304; 926479460; 672275772; 545217041; 864561330; 32472050; 852336473; 144521601; 383750815; 616511468}</div> </div>  <div> <div>{715457951; 308091233; 686233659; 523365634; 260145657; 96581518; 754153775; 622990522; 78662953; 689973864; 609423534; 534351235; 56822117; 899080526; 236413795; 747521954; 249656307; 790813221; 238598034; 203856426; 170015231; 791645278; 991710627; 747864180; 331241135; 416320805; 820623220; 811261319; 154661650; 914880513; 270905767; 954448019; 261442212; 954262444; 293791600; 493225233; 67542211; 911866345; 567575019; 95716070; 410883122; 337767450; 375732581; 616839717; 416849487; 140196829; 200763187; 51759408; 992789421; 882490836}</div> </div>  <div> <div>{650915191; 363659051; 226659197; 706291662; 748630395; 163284394; 663006670; 2890697; 639793395; 728890798; 570088430; 967259303; 101778889; 249725396; 968816738; 276471315; 905010209; 467925249; 798793109; 857289233; 494026470; 476417587; 98570430; 596160845; 211373787; 188742439; 364805067; 757845257; 317224756; 74104796; 455729968; 78933290; 769895010; 476555278; 45379277; 957039727; 395817921; 447349376; 629724490; 287334171; 227424105; 603337884; 467060652; 254067677; 237332026; 976429932; 93075762; 960441433; 132935737; 671265490}</div> </div>  <div> <div>Returns: 755767349</div> </div>  <div> <div>Watch out for integer overflow while calculating the answer.</div> </div> </div> </div> &nbsp;  <div>This problem statement is the exclusive and proprietary property of TopCoder; Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder; Inc. is strictly prohibited. (c)2003; TopCoder; Inc. All rights reserved.</div> <br /> PRIZES<br /> ---Topcoder Editor T-shirt. If your editorial is published<br /> ---Additional cash prizes; once your count of published editorials reaches 10. Please refer below.<br /> ---First 10 editorials published; a crash prize of $50.<br /> ---Next 15 editorials published; a crash prize of $100.<br /> <br /> Once your count of published editorials reaches 25 we will reset the count to 0.</div>  <div>&nbsp;</div> </div>  <p>&nbsp;</p> ",0,30
30056958,SRM 711 Editorials Contest - Div II - Medium - StringTransform,First2Finish,2017-03-25T07:19:00.000-04:00,2017-03-25T05:19:00.000-06:00,2017-04-24T05:19:00.000-06:00,2017-04-24T05:25:00.000-06:00,Completed,5,5,Other,Other,"<div> <p><strong>CHALLENGE OVERVIEW</strong></p>  <div>Welcome to SRM Editorial Challenge! You can now write an Editorial for the SRM &nbsp;and get featured on the blog; Win a Topcoder Editor T Shirt and yes Cash Prize too.<br /> <br /> <strong>DETAILED REQUIREMENTS</strong><br /> In this challenge you are required to write an editorial for the SRM 711 problem <a href=""https://community.topcoder.com/stat?c=problem_statement&amp;pm=14555"">StringTransform</a> &nbsp;. Your submission should adhere to the submission guidelines mentioned below.<br /> &nbsp; <h2>Problem Statement</h2>  <div> <p>You are given the s&nbsp;<strong>s</strong>&nbsp;and&nbsp;<strong>t</strong>. Both strings have the same length. You are allowed to modify&nbsp;<strong>s</strong>. In each step you may choose two valid indices i and j such that i &gt; j; and change&nbsp;<strong>s</strong>[i] to&nbsp;<strong>s</strong>[j]. For example; if&nbsp;<strong>s</strong>&nbsp;= &quot;abc&quot;; you may choose i=2 and j=0; which will change&nbsp;<strong>s</strong>&nbsp;to &quot;aba&quot;. Return &quot;Possible&quot; (quotes for clarity) if you can change&nbsp;<strong>s</strong>&nbsp;into&nbsp;<strong>t</strong>&nbsp;by a sequence of zero or more steps. Otherwise; return &quot;Impossible&quot;.<br /> Note that the return values are case-sensitive.</p> </div>  <h2>Limits</h2>  <div> <div>Time limit (s):</div> &nbsp;  <div>2.000</div> </div>  <div> <div>Memory limit (MB):</div> &nbsp;  <div>512</div> </div>  <div> <h2>Constraints</h2>  <div> <div>-&nbsp;<strong>s</strong>&nbsp;will contain between 1 and 1;000 characters; inclusive.</div> </div>  <div> <div>-&nbsp;<strong>s</strong>&nbsp;and&nbsp;<strong>t</strong>&nbsp;will be of equal length.</div> </div>  <div> <div>-&nbsp;<strong>s</strong>&nbsp;will contain only lowercase English letters.</div> </div>  <div> <div>-&nbsp;<strong>t</strong>&nbsp;will contain only lowercase English letters.</div> </div> </div>  <div> <h2>Examples</h2>  <div>0) <div> <div>&quot;abc&quot;</div> </div>  <div> <div>&quot;aba&quot;</div> </div>  <div> <div>Returns: &quot;Possible&quot;</div> </div>  <div> <div>This is the example from the problem statement. We can change&nbsp;<strong>s</strong>&nbsp;into&nbsp;<strong>t</strong>&nbsp;by changing&nbsp;<strong>s</strong>[2] to&nbsp;<strong>s</strong>[0].</div> </div> </div>  <div><br /> 1) <div> <div>&quot;abc&quot;</div> </div>  <div> <div>&quot;bbc&quot;</div> </div>  <div> <div>Returns: &quot;Impossible&quot;</div> </div>  <div> <div>Note that in each step i must be greater than j. You are not allowed to choose i=0 and j=1.</div> </div> </div>  <div><br /> 2) <div> <div>&quot;topcoder&quot;</div> </div>  <div> <div>&quot;topcoder&quot;</div> </div>  <div> <div>Returns: &quot;Possible&quot;</div> </div>  <div> <div>The two strings are equal; so we don&#39;t have to make any changes.</div> </div> </div>  <div><br /> 3) <div> <div>&quot;rdmcxnnbbe&quot;</div> </div>  <div> <div>&quot;rdrrxrnxbe&quot;</div> </div>  <div> <div>Returns: &quot;Possible&quot;</div> </div> </div>  <div><br /> 4) <div> <div>&quot;rdmcxnnbbe&quot;</div> </div>  <div> <div>&quot;rdqrxrnxbe&quot;</div> </div>  <div> <div>Returns: &quot;Impossible&quot;</div> </div> </div> </div> &nbsp;  <div>This problem statement is the exclusive and proprietary property of TopCoder; Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder; Inc. is strictly prohibited. (c)2003; TopCoder; Inc. All rights reserved.</div> <br /> <strong>PRIZES</strong><br /> ---Topcoder Editor T-shirt. If your editorial is published<br /> ---Additional cash prizes; once your count of published editorials reaches 10. Please refer below.<br /> ---First 10 editorials published; a crash prize of $50.<br /> ---Next 15 editorials published; a crash prize of $100.<br /> <br /> Once your count of published editorials reaches 25 we will reset the count to 0.</div>  <div>&nbsp;</div> </div>  <p>&nbsp;</p> ",0,30
30056957,SRM 711 Editorials Contest - Div II - Easy - SquareMaking,First2Finish,2017-03-25T07:21:00.000-04:00,2017-03-25T05:21:00.000-06:00,2017-04-24T05:21:00.000-06:00,2017-04-24T05:27:00.000-06:00,Completed,9,6,Other,Other,"<p><strong>CHALLENGE OVERVIEW</strong></p>  <div>Welcome to SRM Editorial Challenge! You can now write an Editorial for the SRM &nbsp;and get featured on the blog; Win a Topcoder Editor T Shirt and yes Cash Prize too.<br /> <br /> <strong>DETAILED REQUIREMENTS</strong><br /> In this challenge you are required to write an editorial for the SRM 711 problem <a href=""https://community.topcoder.com/stat?c=problem_statement&amp;pm=14557"">SquareMaking</a>. Your submission should adhere to the submission guidelines mentioned below.  <div>Problem Area</div>  <div> <h2>Problem Statement</h2>  <div> <p>You have four sticks. Their lengths are&nbsp;<strong>a</strong>;&nbsp;<strong>b</strong>;&nbsp;<strong>c</strong>; and&nbsp;<strong>d</strong>. There is also a stick altering store. For one coin they can change (i.e.; either increase or decrease) the length of any stick by 1. You can use the store as many times as you want. You would like to build a square out of your four sticks. Therefore; you need four sticks that each have the same length. Note that the length must be positive.</p>  <p>You are given the s&nbsp;<strong>a</strong>;&nbsp;<strong>b</strong>;&nbsp;<strong>c</strong>; and&nbsp;<strong>d</strong>. Compute and return the smallest number of coins you need to spend at the store.</p> </div>  <h2>Limits</h2>  <div> <div>Time limit (s):</div> &nbsp;  <div>2.000</div> </div>  <div> <div>Memory limit (MB):</div> &nbsp;  <div>512</div> </div>  <div> <h2>Constraints</h2>  <div> <div>-&nbsp;<strong>a</strong>&nbsp;will be between 1 and 1;000;000; inclusive.</div> </div>  <div> <div>-&nbsp;<strong>b</strong>&nbsp;will be between 1 and 1;000;000; inclusive.</div> </div>  <div> <div>-&nbsp;<strong>c</strong>&nbsp;will be between 1 and 1;000;000; inclusive.</div> </div>  <div> <div>-&nbsp;<strong>d</strong>&nbsp;will be between 1 and 1;000;000; inclusive.</div> </div> </div>  <div> <h2>Examples</h2>  <div>0) <div> <div>5</div> </div>  <div> <div>6</div> </div>  <div> <div>5</div> </div>  <div> <div>5</div> </div>  <div> <div>Returns: 1</div> </div>  <div> <div>Here the optimal solution is to pay 1 coin to decrease&nbsp;<strong>b</strong>&nbsp;by 1. After the change you will have four equally long sticks.</div> </div> </div>  <div>1) <div> <div>4</div> </div>  <div> <div>1</div> </div>  <div> <div>5</div> </div>  <div> <div>4</div> </div>  <div> <div>Returns: 4</div> </div>  <div> <div>Here the optimal side length is 4. Hence; you need to pay the store to increase&nbsp;<strong>b</strong>&nbsp;three times and to decrease&nbsp;<strong>c</strong>&nbsp;once. The total amount spent at the store will therefore be 4 coins.</div> </div> </div>  <div>2) <div> <div>2017</div> </div>  <div> <div>2017</div> </div>  <div> <div>2017</div> </div>  <div> <div>2017</div> </div>  <div> <div>Returns: 0</div> </div>  <div> <div>Here you do not need to change sticks at all.</div> </div> </div>  <div>3) <div> <div>705451</div> </div>  <div> <div>751563</div> </div>  <div> <div>608515</div> </div>  <div> <div>994713</div> </div>  <div> <div>Returns: 432310</div> </div> </div> </div> &nbsp;  <div>This problem statement is the exclusive and proprietary property of TopCoder; Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder; Inc. is strictly prohibited. (c)2003; TopCoder; Inc. All rights reserved.</div> </div> <br /> <br /> <strong>PRIZES</strong><br /> ---Topcoder Editor T-shirt. If your editorial is published<br /> ---Additional cash prizes; once your count of published editorials reaches 10. Please refer below.<br /> ---First 10 editorials published; a crash prize of $50.<br /> ---Next 15 editorials published; a crash prize of $100.<br /> <br /> Once your count of published editorials reaches 25 we will reset the count to 0.</div> ",0,30
30056973,Topcoder - Integrate Swagger CodeGen With Maven For Challenge Services,First2Finish,2017-03-27T21:39:00.000-04:00,2017-03-27T19:39:00.000-06:00,2017-04-26T19:39:00.000-06:00,2017-04-26T19:44:00.000-06:00,Completed,3,2,Other,Maven,"For this challenge; we&#39;d like to integrate <a href=""https://github.com/swagger-api/swagger-codegen"">swagger-codegen</a>&nbsp; with the build process for challenge services to achieve the goal as following<br /> <br /> 1. Integrate the&nbsp;<a href=""https://github.com/swagger-api/swagger-codegen/tree/master/modules/swagger-codegen-maven-plugin"">swagger-codegen-maven-plugin</a>&nbsp;<br /> 2. the target should be able to validate the swagger.yaml file and generate code for Java and Javascript languages.&nbsp;<br /> <br /> &nbsp;",50,30
30056972,Fujitsu - Web-based Visual Diagram Editor Enhancements,First2Finish,2017-03-27T21:54:00.000-04:00,2017-03-27T19:54:00.000-06:00,2017-04-26T19:54:00.000-06:00,2017-04-26T20:00:00.000-06:00,Completed,34,5,Linux,HTML;JavaScript,"<h2><span style=""color:rgb(255; 0; 0)"">Competition Task Overview</span></h2>  <p>In a&nbsp;<a href=""https://www.topcoder.com/challenge-details/30056782/?type=develop&amp;noncache=true"" style=""padding: 0px; margin: 0px; color: rgb(102; 102; 102);"">previous challenge</a>&nbsp;we built a visual diagram editor web app / prototype; in this challenge we are going to enhance the eidtor with some extra features. Here&#39;s the list:<br /> - Drawing Edges with other styles (curves and straight lines)<br /> - Drawing self-transition easily (it&#39;s possible to draw self-transition now; but it needs efforts for reshaping)<br /> - Nodes/Edges: Metadata(optional Key-Value pairs)<br /> - Nodes/Edges: Border(Line) style (solid; dashed; dotted; double)<br /> <br /> Please note the editor now also receives server side push messages and can udpate itself based on the commands from the server; this should NOT be broken after adding the new features.</p>  <h2><span style=""color:rgb(255; 0; 0)"">Technology Overview</span></h2>  <p>REST<br /> HTML<br /> Javascript</p> ",300,30
30057001,Hercules React -- Sample list view and scroll view app,Code,2017-03-29T09:01:00.000-04:00,2017-03-29T07:01:00.000-06:00,2017-04-02T07:02:00.000-06:00,2017-04-02T07:02:00.000-06:00,Completed,32,4,Android;iOS,ReactJS,"<span style=""color:rgb(121; 121; 121); font-family:source sans pro;arial;helvetica;sans-serif; font-size:14px"">This challenge is part of a new project involving React Native. &nbsp;The eventual goal is to have a way to build React Native apps for Hercule&#39;s embedded devices that communicate with the device over websockets; using the proprietary XRE messaging protocol. &nbsp;One piece we&#39;re working is the list and scroll view classes. &nbsp;This challenge will implement a React Native app or set of apps that cover the requirements below.<br /> <br /> <strong>Note</strong><br /> <br /> This challenge is *only* React Native. &nbsp;We will do work to translate it to the XRE stuff later; so all you need to do is implement the React Native requirements covered below. &nbsp;Note that your solution should cover different cases and combinations of options; not just the explicit items mentioned below.<br /> <br /> <strong>Requirements</strong><br /> <br /> This challenge will focus on ListView and ScrollView.<br /> <br /> *&nbsp;</span><a href=""https://facebook.github.io/react-native/docs/listview.html"">https://facebook.github.io/react-native/docs/listview.html</a><br /> <span style=""color:rgb(121; 121; 121); font-family:source sans pro;arial;helvetica;sans-serif; font-size:14px"">*&nbsp;</span><a href=""https://facebook.github.io/react-native/docs/scrollview.html"">https://facebook.github.io/react-native/docs/scrollview.html</a><br /> <br /> <span style=""color:rgb(121; 121; 121); font-family:source sans pro;arial;helvetica;sans-serif; font-size:14px"">We want examples that cover all the different options of both classes. &nbsp;Your examples should be relatively rich; with text and images.</span><br /> <br /> <strong>Code quality and documentation</strong><br /> <br /> <span style=""color:rgb(121; 121; 121); font-family:source sans pro;arial;helvetica;sans-serif; font-size:14px"">The code will be used as an example and in developer documentation. &nbsp;It&#39;s important that your code is clear and well documented to ensure that it isn&#39;t confusing for future developers.</span><br /> <br /> <strong>Navigation</strong><br /> <br /> Your sample app must be navigable completely through the keyboard as well as touch. &nbsp;Up; down; left; right buttons; &quot;backspace&quot; to go back; and &quot;enter&quot; are all usable. &nbsp;If there are places where this isn&#39;t a practical requirement; please mention that in the forum.<br /> <br /> <span style=""color:rgb(121; 121; 121); font-family:source sans pro;arial;helvetica;sans-serif; font-size:14px""><strong>Best practices</strong><br /> <br /> The code should follow React Native best practices; and we expect the code to be clear and concise as it will be used in documentation and for validation in the future. &nbsp;We will use the output of this challenge to build in the additional handling into our XRE layer; making sure to compare the output from XRE to the output displayed in this sample app.</span><br /> <br /> <br /> <strong>Submission</strong><br /> <br /> <span style=""color:rgb(121; 121; 121); font-family:merriweather sans; font-size:14px"">Your submission should be a React Native app that can be built and installed on an Android or iOS device or simulator; meeting the requirements laid out above. &nbsp;Your README must clearly describe how to build and test the app.</span><br /> <br /> <span style=""color:rgb(121; 121; 121); font-family:merriweather sans; font-size:14px"">Just the app running and some validation is all that is required for the video. &nbsp;You don&#39;t need to cover the entire build in your video.</span>",750,4
30057002,Hercules Fog Recorder - Pass through state,Code,2017-03-29T09:01:00.000-04:00,2017-03-29T07:01:00.000-06:00,2017-04-03T07:02:00.000-06:00,2017-04-03T07:02:00.000-06:00,Completed,26,2,Other,C;C++,"<div> <div> <p>The Hercules Player is an application that allows customers to download videos to their computer or device for offline playback; along with streaming playback of videos for online playback.</p>  <p>The Hercules Fog project has stripped out some key portions of the Hercules Player application into a new test application for downloading videos from a server; modifying the manifest; and then playing back on various mobile and TV devices.</p>  <p>The current implementation is C++ and will run on:</p>  <ul> 	<li>* Windows (with some build tweaks)<br /> 	* Linux<br /> 	* Mac 	<p>&nbsp;</p> 	</li> </ul> This challenge will implement a new state for the Fog recorder that is &quot;TSB disabled&quot;; where Fog will still be in the flow; but won&#39;t actually write files to storage.<br /> <br /> <strong>Tune time merge</strong><br /> <br /> This challenge will merge in the changes in the tune_time_fixes branch back into master. &nbsp;Please make sure your patch file:<br /> <br /> * Applies to the&nbsp;<strong>master</strong>&nbsp;branch<br /> *&nbsp;<strong>Includes</strong>&nbsp;the tune_time_fixes changes<br /> <br /> <strong>TSB Disabled</strong><br /> <br /> Fog runs on an embedded device that uses an SD card for storage. &nbsp;There are concerns that the SD card could wear out quickly if Fog is used at all times; so we need a way to disable it and enable it; while Fog is still running. &nbsp;All requests for manifests and fragments will still flow through Fog and the &quot;tsb&quot; endpoint; but if Fog is in &quot;Pass through&quot; state; it will just lazily fetch the fragments from the remote server as they are requested by the player. &nbsp;The fragments won&#39;t be cached in RAM or saved to disk - Fog will basically just be a transparent proxy.<br /> <br /> When Fog is <strong>not&nbsp;</strong>in &quot;Pass through&quot; state; it will work like it does now.<br /> <br /> <strong>NOTE: &nbsp;</strong>Even when Fog is in &quot;Pass through&quot; state; it&#39;s own automatic bitrate switching algorithm will be used *not* the algorithm of the player.<br /> <br /> <strong>REST endpoint</strong><br /> <br /> We need a REST endpoint added that can be used to query the &quot;Pass through&quot; state; as well as change the state of the pass through from enabled to disabled or disabled to enabled.<br /> <br /> <strong>Dynamic changes</strong><br /> <br /> Note that the change to the pass through state will be done when Fog is running; so Fog will need to start saving to disk immediately if pass through state is turned off; and it should stop saving to disk if pass through state is turned on. &nbsp;A good way to test this is to play a stream through Fog and enable and disable the pass through state at different times. &nbsp;Playback should not be affected.<br /> <br /> <strong>Branch</strong><br /> <br /> We will target the code in branch master for this challenge<br /> <br /> <strong>Validation</strong><br /> <br /> You must provide clear steps for validation. &nbsp;You are encouraged to add extra debug logging (we may remove it later) or other functionality so that we can easily see how the fragment requests are handled and whether things are pass-through or from the Fog recording.<br /> &nbsp; <h3><strong>Submission</strong></h3>  <p>Your submission to OR should be a Git patch file that can be applied to see the fixes. Here is documentation on how to generate a Git patch file:</p>  <p><a href=""https://ariejan.net/2009/10/26/how-to-create-and-apply-a-patch-with-git/"" style=""padding: 0px; margin: 0px; color: rgb(102; 102; 102); background: 0px 0px; text-decoration: none; outline: 0px; cursor: pointer; transition: all 0.2s ease-in-out; -webkit-tap-highlight-color: transparent; word-wrap: break-word;"">https://ariejan.net/2009/10/26/how-to-create-and-apply-a-patch-with-git/<br /> <br /> We will target Git commit hash&nbsp;</a>36354917eca945f199f058f685c056af68a029fc&nbsp;on the &quot;master&quot; branch<br /> <br /> <strong>Submission README:</strong><br /> <br /> <span style=""font-family:source sans pro;arial;helvetica;sans-serif"">Please submit a Git patch file and a separate README (don&#39;t update the README in Git) that describes your changes and how to validate the optimisations above.</span><br /> <br /> <strong>Video:</strong></p> <span style=""font-family:source sans pro;arial;helvetica;sans-serif"">No video is required for this challenge.</span></div>  <div>&nbsp;</div> </div>  <p>&nbsp;</p> ",1650,5
30057000,Hercules React -- Sample client requirements app,Code,2017-03-29T14:01:00.000-04:00,2017-03-29T12:01:00.000-06:00,2017-04-03T12:02:00.000-06:00,2017-04-03T12:02:00.000-06:00,Completed,33,1,Android;iOS,ReactJS,"<div><span style=""font-family:source sans pro;arial;helvetica;sans-serif"">This challenge is part of a new project involving React Native. &nbsp;The eventual goal is to have a way to build React Native apps for Hercule&#39;s embedded devices that communicate with the device over websockets; using the proprietary XRE messaging protocol. &nbsp;One piece we&#39;re working is some specific client requirements. &nbsp;This challenge will implement a React Native app or set of apps that cover the requirements below.<br /> <br /> <strong>Note</strong><br /> <br /> This challenge is *only* React Native. &nbsp;We will do work to translate it to the XRE stuff later; so all you need to do is implement the React Native requirements covered below. &nbsp;Note that your solution should cover different cases and combinations of options; not just the explicit items mentioned below.<br /> <br /> <strong>Requirements</strong><br /> <br /> This challenge will focus on text and images and specific layouts that are used in client applications. &nbsp;An example client application that&#39;s written in XRE will be provided in the forum. &nbsp;You should look at that to get examples beyond what are provided below. &nbsp;<br /> <br /> These components are needed and will be part of the additional &quot;Grid Guide&quot; requirement below<br /> <br /> 1. &nbsp;On the client application; the &quot;Info&quot; panel has a few specific quirks that we need to demo:<br /> * The description paragraph can be a mixture of images and text. &nbsp;In the example below; &quot;NEW&quot; is an image<br /> * The description text will auto-wrap and auto-truncate. &nbsp;Note the last word - &quot;Afte...&quot;. &nbsp;<br /> <img alt="""" src=""https://www.dropbox.com/s/h2xm144jc6sp38o/735ca0ab-1283-4038-bdf9-2fda41e66741.png?dl=1"" /></span><br /> <br /> <span style=""font-family:source sans pro;arial;helvetica;sans-serif"">2. &nbsp;Text masking is another important subject with the client. &nbsp;In the screenshot below; note that the text is &quot;Forensic Files&quot;; but it fades out at the end of &quot;Files&quot;. &nbsp;This is done with an overlay mask image to fade out the text. &nbsp;We need to show this in our React Native app<br /> <img alt="""" src=""https://www.dropbox.com/s/fknie8hkppymskj/c8275745-2ad4-4d17-b38b-671b9cb076cc.png?dl=1"" /><br /> <br /> <strong>Grid guide</strong><br /> <br /> The above components are pieces of the &quot;grid guide&quot; page in the main XRE app. &nbsp;This challenge will use the components above to build out a simple copy of the grid page. &nbsp;A testable example will be provided in the forum; but for this challenge we wnat to show:<br /> <br /> * Navigation of the grid guide using left; right; up; and down<br /> * Updating the info panel at the bottom as the navigation changes<br /> * Scrolling of the grid guide&nbsp;<br /> * The fading at the end of individual cells for long-titled shows<br /> <br /> You can hard-code in the data shown; but make sure it reasonably matches the grid guide given in the forum.<br /> <br /> <img alt="""" src=""https://www.dropbox.com/s/g8bj8xb0jws5w85/Screen%20Shot%202017-03-29%20at%204.19.53%20PM.png?dl=1"" style=""height:263px; width:500px"" /><br /> <br /> <br /> <strong>Best practices</strong><br /> <br /> The code should follow React Native best practices; and we expect the code to be clear and concise as it will be used in documentation and for validation in the future. &nbsp;We will use the output of this challenge to build in the additional handling into our XRE layer; making sure to compare the output from XRE to the output displayed in this sample app.</span><br /> <br /> <strong>Submission</strong><br /> <br /> Your submission should be a React Native app that can be built and installed on an Android or iOS device or simulator; meeting the requirements laid out above. &nbsp;Your README must clearly describe how to build and test the app.<br /> <br /> Just the app running and some validation is all that is required for the video. &nbsp;You don&#39;t need to cover the entire build in your video.<br /> &nbsp;</div>  <div>&nbsp;</div>  <p>&nbsp;</p> ",1200,5
30057038,Topcoder - Create Custom Docker Image For Build And Run Competition Engine,Assembly Competition,2017-03-30T12:00:00.000-04:00,2017-03-30T10:00:00.000-06:00,2017-04-01T10:00:00.000-06:00,2017-04-04T10:00:00.000-06:00,Active,23,0,Other,Ant;Docker;Java,"Previously; we have worked out a general approach to run Topcoder Competition Engine in docke environment.<br /> <br /> For this challenge; we&#39;d like to improve it and make it clean and easy to use. Following are the general requirements.<br /> <br /> Assuming; we have checkout all sources in <u>dev</u> directory locally<br /> <br /> 1. A Dockerfile file which can be used to build a base image for build and run the competition engine; it should do all steps in one single user; no need to create separate users like apps; farm; deployer etc<br /> 1.1 The base image will based on centos 6.8 (use the <u>centos6.8</u> tag at&nbsp;<a href=""https://hub.docker.com/_/centos/"">https://hub.docker.com/_/centos/</a>)<br /> 1.2 the Docker image should have needed software ready; install and setup JDK; ANT etc<br /> 1.3 The docker image should have the base softwares ready for building; like&nbsp;jboss-4.0.5.GA.zip;&nbsp;apache-tomcat-5.5.27.zip etc; no need to unzip in the build image; should be part of the building process.<br /> 1.4 The Docker image will not contain the source code for the whole competition engine; define volume to take in when run the container.<br /> 1.5 A build script which will build everything into the <u>deployment</u> directory; this should be defined as volume too. So we can take the built peices out of docker container.<br /> 1.6 A start script which can run the services by using the built pieces in <u>deployment</u> directory inside the base image<br /> 1.7 That is saying; we can use the base image to take the built pieces; and we can also use it to run the services; the ultimate goal is with the <u>deployment</u> directory we can build docker images for each sub-system and easily grouping them as a complete system; and this will be good for&nbsp;<br /> <br /> 2. Define a docker-compose file which links all the services to have a completely running environment for competition engine.<br /> - databases (<a href=""https://hub.docker.com/r/appiriodevops/tc-database-scripts/"">https://hub.docker.com/r/appiriodevops/tc-database-scripts/</a>)<br /> * informix (use <u>latest</u> tag)<br /> *&nbsp;mysql (use <u>mysql</u> tag)<br /> - openldap service (use openldap tag in <a href=""https://hub.docker.com/r/appiriodevops/tc-arena/"">https://hub.docker.com/r/appiriodevops/tc-arena/</a>)<br /> - competition engine (tomcat; jboss; listeners; should be run with the base image)<br /> - farm processors (use <u>farm-processor</u> tag in&nbsp;<a href=""https://hub.docker.com/r/appiriodevops/tc-arena/"">https://hub.docker.com/r/appiriodevops/tc-arena/</a>)<br /> <br /> 3. For centos6.8 setup; you can check <u>dev/app/setup/centos/arena-setup.sh</u> for better understanding.<br /> 4. All previous setup documentation will be provided for reference and better understanding; please raise your questions if you have as quickly as you can.<br /> <br /> <u>Verification</u><br /> <br /> After up the whole system; you can<br /> 1. Following&nbsp;<u>TopCoder_Competition_Engine_Build_and_Run.pdf</u> to verify the whole system is running properly.<br /> 2. Check the logs of each subsystem to make sure all is working properly<br /> <br /> <br /> <br /> <br /> <br /> &nbsp;",1500,5
30057055,Hercules React -- Demo app consolidation,Code,2017-03-31T09:01:00.000-04:00,2017-03-31T07:01:00.000-06:00,2017-04-05T07:01:00.000-06:00,2017-04-05T07:02:00.000-06:00,Completed,26,2,Android;iOS,ReactJS,"<span style=""color:rgb(121; 121; 121); font-family:source sans pro;arial;helvetica;sans-serif; font-size:14px"">This challenge is part of a new project involving React Native. &nbsp;The eventual goal is to have a way to build React Native apps for Hercule&#39;s embedded devices that communicate with the device over websockets; using the proprietary XRE messaging protocol. &nbsp;We have lots of different samples and different apps at the moment; and this challenge will take those and consolidate them into an app that has a consistent look and feel and that can be easily navigated by the keyboard. &nbsp;All future samples will be integrated into this sample app and will be used to test further XRE integrations.</span><br /> <br /> We will also use this app to compare the mobile rendering to the XRE and pxscene rendering to ensure consistency when we get to QA.<br /> <br /> <strong>Note</strong><br /> <br /> <span style=""color:rgb(121; 121; 121); font-family:source sans pro;arial;helvetica;sans-serif; font-size:14px"">This challenge is *only* React Native. &nbsp;In general; please don&#39;t use any mobile specific classes or functionality; since the final platform won&#39;t be a mobile platform. &nbsp;<br /> <br /> <strong>Navigation</strong><br /> <br /> All navigation will be done using keys:<br /> <br /> * Up&nbsp;<br /> * Down<br /> * Left<br /> * Right<br /> * Enter<br /> * Backspace (to go back)<br /> <br /> <strong>Flexible layout</strong><br /> <br /> Note that this app will need to work across mobile devices and TVs; so please make sure to use a properly flexible layout that will work on phones; tablets; and TVs at 1280x720 resolution.<br /> <br /> <strong>Menus</strong><br /> <br /> The main screen should be a set of menu buttons that can navigate. &nbsp;Clicking the main menu buttons will go to a new screen with sub-menu buttons where individual examples can be selected. &nbsp;To go back from a sub-menu; the user should be able to hit backspace on the keyboard. &nbsp;You can include a tappable button for mobile testing; but the final app will be keyboard navigable.<br /> <br /> For example:<br /> <br /> * Keyboard<br /> &nbsp; &nbsp; * Click counter<br /> &nbsp; &nbsp; * Keyboard events&nbsp;<br /> * Images<br /> &nbsp; &nbsp;* Image rendering&nbsp;<br /> * Layouts<br /> &nbsp;&nbsp; * Dynamic<br /> &nbsp; &nbsp;* Flex<br /> &nbsp; &nbsp;* Flex Direction<br /> &nbsp; &nbsp;* Justify Content<br /> &nbsp; &nbsp;* Align Items<br /> &nbsp; &nbsp;* Align Self<br /> &nbsp; &nbsp;* Aspect Ratio<br /> &nbsp; &nbsp;* Position<br /> &nbsp; &nbsp;* Overflow<br /> &nbsp; &nbsp;* zIndex<br /> &nbsp; &nbsp;* Size<br /> &nbsp; &nbsp;* Offset<br /> &nbsp; &nbsp;* Margin<br /> &nbsp; &nbsp;* Padding<br /> &nbsp; &nbsp;* Border<br /> * Timers<br /> &nbsp;&nbsp; * Timers test<br /> * Text&nbsp;<br /> &nbsp;&nbsp; * Text format<br /> <br /> <strong>Example</strong><br /> <br /> An existing test suite from the client can be found linked to in the forum. &nbsp;You can use this as an example of the menu structure; but don&#39;t base your code too heavily on this - just use it for inspiration / reference.<br /> <br /> <strong>Existing demos</strong><br /> <br /> Existing demos are available and match the menu structure above. &nbsp;These will be provided in the forum and should be integrated into the final app. &nbsp;Note that the look and feel of these demos should be updated to match the UI requirements for fonts; colors; images; etc... &nbsp;The goal is to have a relatively consistent look and feel for all the demos.</span><br /> <br /> Each demo should have a clear title and instruction text explaining any possible interactions<br /> <br /> Each demo needs to have a margin around the edges for TV display of 50px.<br /> <br /> For each demo; please make sure the font size is big enough to read on a TV as well<br /> <br /> For each demo; please update the font colors to match the menu UI details below; whenever it makes sense.<br /> <br /> Each demo needs to be updated to be fully navigable by keyboard; if it isn&#39;t already.<br /> <br /> <strong>Menu UI / look and feel</strong><br /> <br /> In the upper left portion of each menu and submenu should be text &quot;XFINITY&quot; in a large font; in a white color. &nbsp;Please use these colors in the menu structure:<br /> <br /> * Background black (#000000)<br /> * Text: &nbsp;white (#FFFFFF)<br /> * Selection: blue (#1A639D)<br /> <br /> Fonts will be provided for use as well in the forum.<br /> <br /> <strong>Extensibility</strong><br /> <br /> Note that in the future we will be adding in demos to the menu structure and app. &nbsp;Please make sure to document how to add demos and make sure the app is easily extensible to support new demos.<br /> <br /> <span style=""color:rgb(121; 121; 121); font-family:source sans pro;arial;helvetica;sans-serif; font-size:14px""><strong>Best practices</strong><br /> <br /> The code should follow React Native best practices; and we expect the code to be clear and concise as it will be used in documentation and for validation in the future. &nbsp;</span><br /> <br /> <strong>Submission</strong><br /> <br /> <span style=""color:rgb(121; 121; 121); font-family:merriweather sans; font-size:14px"">Your submission should be a React Native app that can be built and installed on an Android or iOS device or simulator; meeting the requirements laid out above. &nbsp;Your README must clearly describe how to build and test the app.</span><br /> <br /> <span style=""color:rgb(121; 121; 121); font-family:merriweather sans; font-size:14px"">Just the app running and some validation is all that is required for the video. &nbsp;You don&#39;t need to cover the entire build in your video.</span><br /> &nbsp;",1200,5
30048252,Module Assembly - Web Arena - Match Management Page Load Improvement,Assembly Competition,2015-01-01T09:01:00.000-05:00,2015-01-01T07:01:00.000-07:00,2015-01-03T07:01:00.000-07:00,2015-01-06T07:02:00.000-07:00,Completed,16,3,HTML,Angular.js;CSS;HTML;JavaScript,"<h1><span style=""color:rgb(255; 0; 0)"">Project Overview</span></h1>  <p>TopCoder is implementing a Web-based Arena by using Web Socket protocol;&nbsp;AngularJS Framework (<a href=""http://angularjs.org/"">http://angularjs.org</a>;&nbsp;<a href=""http://docs.angularjs.org/guide"">http://docs.angularjs.org/guide</a>) and Bootstrap 3 (<a href=""http://getbootstrap.com/getting-started"">http://getbootstrap.com/getting-started</a>).</p>  <p>The frontend application is using&nbsp;AngularJS Framework (<a href=""http://angularjs.org/"">http://angularjs.org</a>;&nbsp;<a href=""http://docs.angularjs.org/guide"">http://docs.angularjs.org/guide</a>) and Bootstrap 3 (<a href=""http://getbootstrap.com/getting-started"">http://getbootstrap.com/getting-started</a>); and using web socket protocol to exchange data with backend web socket listener.</p>  <p>The backend web socket listener is ready for exchanging messages over web socket protocol.</p>  <h1><span style=""color:rgb(255; 0; 0)"">Competition Task Overview</span></h1>  <p>We are in the process of implementing and improving the web arena;&nbsp;the code can be found at&nbsp;<a href=""https://github.com/appirio-tech/arena-web"">appirio-tech/arena-web</a>; by default it is using&nbsp;<strong>dev&nbsp;</strong>branch after clone; if it is not; please switch to&nbsp;<strong>dev&nbsp;</strong>branch for your development.</p>  <p>For this challenge; we&#39;d like to improve the load for match management page.</p>  <p>Currently; if you login as adminstrator into web arena; and click the match management page; All the matches in the database will be loaded. Even there is pagination.</p>  <p>This will be a problem in production; as there are hundreds of matches. which makes the arena crash; please check this screencast -&nbsp;<a href=""http://screencast.com/t/2fYYjFd4V3qs"" style=""color: rgb(0; 0; 0); font-family: Arial; Helvetica; sans-serif; font-size: 12.222222328186px; line-height: normal; background-color: rgb(227; 243; 255);"" target=""_blank"">http://screencast.com/t/2fYYjFd4V3qs</a>.</p>  <p>In order to reduce the performance issue and reduce the calls to TC API.</p>  <p>We have created a new Get Rounds API to aid for this page.</p>  <p>1. no need to call Get SRM Contests API anymore.</p>  <p>2. pagination support; so we just need to get rounds data for that page.</p>  <p>3. return more data by default.</p>  <p>With this improvement; I think we can improve the load of match management page and reduce the calls to TC API.</p>  <p>for this challenge; you are expected to use the Get Rounds API to make this improvement.</p>  <p>if there is any further improvement; please discuss in forum; so we can address during the submission phase or final fix phase. This will be a good consideration for your submission; and reviewer should be judging that properly in review scorecards.</p>  <p>Following changes are in my mind. Please post questions in forum if you disagree or there are more.</p>  <p>1. remove the call to Get SRM Contests API and Get SRM Contest Rounds API</p>  <p>2. use the Get Rounds API to retrieve the rounds data for the corresponding pagination</p>  <p>3. for each pagination; there will be a load time to retreive the new data; please show the loading icon; and disable all other actions.</p>  <p>4. for editing of each column; call the APIs when the corresponding action is triggered; instead of prefill it at first.</p>  <p><span style=""color:rgb(0; 0; 255); line-height:1.6"">How to Setup</span></p>  <p>Please check&nbsp;https://github.com/appirio-tech/arena-web/wiki for how to setup your deve environment.</p>  <p>for backend; an Arena VM will be allocated to each competitor; to setup SRM contests datas.</p>  <p><span style=""color:rgb(0; 0; 255)"">Winner Responsibility</span></p>  <p>Winner will be responsible to create a pull request in final fix phase for final review; and be responsible to update the pull request to auto merge.</p>  <p><span style=""color:rgb(0; 0; 255)"">Arena VM</span></p>  <p><span style=""color:rgb(255; 0; 0)"">Before asking your own VM; you need to have a public key on your profile before asking for the VM.</span></p>  <p>You can find more details on how to generate a key&nbsp;<a href=""http://apps.topcoder.com/wiki/display/projects/Generate+SSH+Key"" rel=""nofollow"">http://apps.topcoder.com/wiki/display/projects/Generate+SSH+Key</a>&nbsp;and how to connect using it&nbsp;<a href=""http://apps.topcoder.com/wiki/display/projects/Connect+Using+SSH+Key"" rel=""nofollow"">http://apps.topcoder.com/wiki/display/projects/Connect+Using+SSH+Key</a>.</p>  <p>To use the Arena VM; please follow&nbsp;<a href=""http://apps.topcoder.com/wiki/display/docs/Competition+Engine+VM+Setup"" rel=""nofollow"">http://apps.topcoder.com/wiki/display/docs/Competition+Engine+VM+Setup</a></p>  <p><strong><span style=""color:rgb(0; 0; 255)"">Specific HTML/CSS/JavaScript Requirements:</span><br /> <span style=""color:rgb(255; 0; 0)"">HTML/CSS Requirements:</span></strong><br /> - Your HTML code must be valid HTML5 and follow best practices<br /> - Validate your code - reviewers may accept minor validation errors; but please comment your reason for any validation errors. Use the validators listed in the scorecard.<br /> - Use CSS to space out objects; not clear/transparent images (GIFs or PNGs) and use proper structural CSS to layout your page. Only use table tags for tables of data/information and not for page layout.<br /> - No inline CSS styles - all styles must be placed in an external style-sheet.<br /> - Use semantically correct tags - use H tags for headers; etc. Use strong and em tags instead of bold and italic tags.<br /> - Element and Attribute names should be in lowercase and use a &quot;-&quot; or camel naming to separate multiple-word classes (i.e.. &quot;main-content&quot;; or &quot;mainContent)<br /> -&nbsp;<strong>Label all CSS; JavaScript; or HTML hacks with explanations so others will understand.</strong><br /> - Your code must render properly in all browsers listed in the scorecard in both Mac and PC environments.<br /> <br /> <span style=""color:rgb(255; 0; 0)""><strong>JavaScript Requirements:</strong></span><br /> <strong>-</strong>&nbsp;<a href=""http://jquery.com/download/"">jQuery</a><br /> <strong>-</strong>&nbsp;<a href=""http://angularjs.org/"">AngularJS</a><br /> - All custom javascript (written by the competitors) must pass jslint checks</p>  <p><span style=""color:rgb(255; 0; 0)""><strong>Browsers Requirements:</strong></span><br /> - IE10<br /> - IE11<br /> - Latest Safari<br /> - Latest Firefox<br /> - Latest Chrome</p> ",1500,5
30048260,Hercules OnCampus Android TV App - Browse to TV show episode and other items not working,First2Finish,2015-01-01T13:33:00.000-05:00,2015-01-01T11:33:00.000-07:00,2015-01-31T11:33:00.000-07:00,2015-01-31T11:38:00.000-07:00,Completed,4,1,Android,Android,<p><strong>Overview</strong></p>  <p>The Hercules University application is a set of apps for iOS; Android; and the web; allowing users to watch live TV and On Demand videos on Universities.</p>  <p>The application this F2F refers to is the Android TV application that will allow for browsing Live TV and On Demand videos on the Android TV platform.</p>  <p>This F2F challenge applies to the *ANDROID TV* application.</p>  <p><strong>Code</strong></p>  <p>The existing code is here:</p>  <p>https://gitlab.com/team-autobots/androidtv/</p>  <p>You will need to use Android Studio to build the code. For best performance; use the Intel Atom Android 5.0 Android TV simulator.</p>  <p>If you need code access; please request in the F2F TopCoder forum with your Gitlab username. You will be given read-only access.</p>  <p>Please ask any questions in the TopCoder forum or on Gitlab. Either is appropriate.</p>  <p><strong>Building Code</strong></p>  <p>There is a README.md file here that explains test accounts and how to build the app:</p>  <p>https://gitlab.com/team-autobots/androidtv/blob/master/README.md</p>  <p>Ignore the direct tickets documentation if you don&acirc;&euro;&trade;t have write access to the repository.</p>  <p><strong>Submission</strong></p>  <p>Your submission to OR should be a Git patch file that can be applied to see the fixes. Here is documentation on how to generate a Git patch file:</p>  <p>https://ariejan.net/2009/10/26/how-to-create-and-apply-a-patch-with-git/</p>  <p><strong>Ticket</strong></p>  <p>The ticket is on Gitlab here: &nbsp;https://gitlab.com/team-autobots/androidtv/issues/52</p> ,75,30
30048261,Hercules OnCampus Android TV App - Background flip between grid and content,First2Finish,2015-01-01T13:41:00.000-05:00,2015-01-01T11:41:00.000-07:00,2015-01-31T11:41:00.000-07:00,2015-01-31T11:46:00.000-07:00,Completed,8,2,Android,Android,<p><strong>Overview</strong></p>  <p>The Hercules University application is a set of apps for iOS; Android; and the web; allowing users to watch live TV and On Demand videos on Universities.</p>  <p>The application this F2F refers to is the Android TV application that will allow for browsing Live TV and On Demand videos on the Android TV platform.</p>  <p>This F2F challenge applies to the *ANDROID TV* application.</p>  <p><strong>Code</strong></p>  <p>The existing code is here:</p>  <p>https://gitlab.com/team-autobots/androidtv/</p>  <p>You will need to use Android Studio to build the code. For best performance; use the Intel Atom Android 5.0 Android TV simulator.</p>  <p>If you need code access; please request in the F2F TopCoder forum with your Gitlab username. You will be given read-only access.</p>  <p>Please ask any questions in the TopCoder forum or on Gitlab. Either is appropriate.</p>  <p><strong>Building Code</strong></p>  <p>There is a README.md file here that explains test accounts and how to build the app:</p>  <p>https://gitlab.com/team-autobots/androidtv/blob/master/README.md</p>  <p>Ignore the direct tickets documentation if you don&acirc;&euro;&trade;t have write access to the repository.</p>  <p><strong>Submission</strong></p>  <p>Your submission to OR should be a Git patch file that can be applied to see the fixes. Here is documentation on how to generate a Git patch file:</p>  <p>https://ariejan.net/2009/10/26/how-to-create-and-apply-a-patch-with-git/</p>  <p><strong>Ticket</strong></p>  <p>The ticket is on Gitlab here: &nbsp;https://gitlab.com/team-autobots/androidtv/issues/53</p> ,100,30
30048262,Hercules OnCampus TV App - Buffering screen change,First2Finish,2015-01-01T14:03:00.000-05:00,2015-01-01T12:03:00.000-07:00,2015-01-31T12:03:00.000-07:00,2015-01-31T12:08:00.000-07:00,Completed,10,7,Android,Android,"<h3>Overview</h3>  <p>The Hercules University application is a set of apps for iOS; Android; and the web; allowing users to watch live TV and On Demand videos on Universities.</p>  <p>The application this F2F refers to is the Android TV application that will allow for browsing Live TV and On Demand videos on the Android TV platform.</p>  <p>This F2F challenge applies to the *ANDROID TV* application.</p>  <h3>Code</h3>  <p>The existing code is here:</p>  <p><a href=""https://gitlab.com/team-autobots/androidtv/"">https://gitlab.com/team-autobots/androidtv/</a></p>  <p>You will need to use Android Studio to build the code.  For best performance; use the Intel Atom Android 5.0 Android TV simulator.</p>  <p>If you need code access; please request in the F2F TopCoder forum with your Gitlab username.  You will be given read-only access.</p>  <p>Please ask any questions in the TopCoder forum or on Gitlab.  Either is appropriate.</p>  <h3>Building Code</h3>  <p>There is a README.md file here that explains test accounts and how to build the app:</p>  <p><a href=""https://gitlab.com/team-autobots/androidtv/blob/master/README.md"">https://gitlab.com/team-autobots/androidtv/blob/master/README.md</a></p>  <p>Ignore the direct tickets documentation if you don���t have write access to the repository.</p>  <h3>Submission</h3>  <p>Your submission to OR should be a Git patch file that can be applied to see the fixes.  Here is documentation on how to generate a Git patch file:</p>  <p><a href=""https://ariejan.net/2009/10/26/how-to-create-and-apply-a-patch-with-git/"">https://ariejan.net/2009/10/26/how-to-create-and-apply-a-patch-with-git/</a></p>  <h3>Ticket</h3>  <p>The ticket is on Gitlab here:</p>    <p><a href=""https://gitlab.com/team-autobots/androidtv/issues/54"">https://gitlab.com/team-autobots/androidtv/issues/54</a></p>",200,30
30048263,Hercules OnCampus TV App - Play / pause button on the playback screen,First2Finish,2015-01-01T14:17:00.000-05:00,2015-01-01T12:17:00.000-07:00,2015-01-31T12:17:00.000-07:00,2015-01-31T12:22:00.000-07:00,Completed,13,1,Android,Android,"<h3>Overview</h3>  <p>The Hercules University application is a set of apps for iOS; Android; and the web; allowing users to watch live TV and On Demand videos on Universities.</p>  <p>The application this F2F refers to is the Android TV application that will allow for browsing Live TV and On Demand videos on the Android TV platform.</p>  <p>This F2F challenge applies to the *ANDROID TV* application.</p>  <h3>Code</h3>  <p>The existing code is here:</p>  <p><a href=""https://gitlab.com/team-autobots/androidtv/"">https://gitlab.com/team-autobots/androidtv/</a></p>  <p>You will need to use Android Studio to build the code.  For best performance; use the Intel Atom Android 5.0 Android TV simulator.</p>  <p>If you need code access; please request in the F2F TopCoder forum with your Gitlab username.  You will be given read-only access.</p>  <p>Please ask any questions in the TopCoder forum or on Gitlab.  Either is appropriate.</p>  <h3>Building Code</h3>  <p>There is a README.md file here that explains test accounts and how to build the app:</p>  <p><a href=""https://gitlab.com/team-autobots/androidtv/blob/master/README.md"">https://gitlab.com/team-autobots/androidtv/blob/master/README.md</a></p>  <p>Ignore the direct tickets documentation if you don���t have write access to the repository.</p>  <h3>Submission</h3>  <p>Your submission to OR should be a Git patch file that can be applied to see the fixes.  Here is documentation on how to generate a Git patch file:</p>  <p><a href=""https://ariejan.net/2009/10/26/how-to-create-and-apply-a-patch-with-git/"">https://ariejan.net/2009/10/26/how-to-create-and-apply-a-patch-with-git/</a></p>  <h3>Ticket</h3>  <p>The ticket is on Gitlab here:</p>    <p><a href=""https://gitlab.com/team-autobots/androidtv/issues/55"">https://gitlab.com/team-autobots/androidtv/issues/55</a></p>",150,30
30048264,Hercules OnCampus TV App - Browsing optimization,First2Finish,2015-01-01T14:20:00.000-05:00,2015-01-01T12:20:00.000-07:00,2015-01-31T12:20:00.000-07:00,2015-01-31T12:25:00.000-07:00,Completed,3,1,Android,Android,"<h3>Overview</h3>  <p>The Hercules University application is a set of apps for iOS; Android; and the web; allowing users to watch live TV and On Demand videos on Universities.</p>  <p>The application this F2F refers to is the Android TV application that will allow for browsing Live TV and On Demand videos on the Android TV platform.</p>  <p>This F2F challenge applies to the *ANDROID TV* application.</p>  <h3>Code</h3>  <p>The existing code is here:</p>  <p><a href=""https://gitlab.com/team-autobots/androidtv/"">https://gitlab.com/team-autobots/androidtv/</a></p>  <p>You will need to use Android Studio to build the code.  For best performance; use the Intel Atom Android 5.0 Android TV simulator.</p>  <p>If you need code access; please request in the F2F TopCoder forum with your Gitlab username.  You will be given read-only access.</p>  <p>Please ask any questions in the TopCoder forum or on Gitlab.  Either is appropriate.</p>  <h3>Building Code</h3>  <p>There is a README.md file here that explains test accounts and how to build the app:</p>  <p><a href=""https://gitlab.com/team-autobots/androidtv/blob/master/README.md"">https://gitlab.com/team-autobots/androidtv/blob/master/README.md</a></p>  <p>Ignore the direct tickets documentation if you don���t have write access to the repository.</p>  <h3>Submission</h3>  <p>Your submission to OR should be a Git patch file that can be applied to see the fixes.  Here is documentation on how to generate a Git patch file:</p>  <p><a href=""https://ariejan.net/2009/10/26/how-to-create-and-apply-a-patch-with-git/"">https://ariejan.net/2009/10/26/how-to-create-and-apply-a-patch-with-git/</a></p>  <h3>Ticket</h3>  <p>The ticket is on Gitlab here:</p>    <p><a href=""https://gitlab.com/team-autobots/androidtv/issues/56"">https://gitlab.com/team-autobots/androidtv/issues/56</a></p>",75,30
30048253,Asteroid Data Hunter - Release Assembly (Fix Defects and Create Installer),Assembly Competition,2015-01-01T14:22:00.000-05:00,2015-01-01T12:22:00.000-07:00,2015-01-01T12:22:00.000-07:00,2015-01-07T21:49:00.000-07:00,Completed,1,1,Other,HTML;Hibernate;J2EE;JSP;Java;JavaScript;Spring;jQuery,"<h2><span style=""color:rgb(255; 0; 0)"">Project Overview</span></h2>  <p><span style=""font-size:12px"">The goal of the NASA Asteroid Data Hunter project is to provide professional astronomers &amp; citizen hobbyists with a tool that will identify asteroids in images. The Asteroid Data Hunter Tool; for input; uses images and detects asteroids using an algorithm.</span></p>  <p><span style=""font-size:12px"">This assembly is responsible for fixing all remaining issues and create a one click installer for the Application.</span></p>  <h2><span style=""color:rgb(255; 0; 0)"">Competition Task Overview</span></h2>  <p><span style=""font-size:12px"">This assembly is responsible for:</span></p>  <ul> 	<li><span style=""font-size:12px"">One click installer for Linux and Windows. See attached specification.</span></li> 	<li><span style=""font-size:12px"">Fix all the remaining issues:&nbsp;<a href=""https://apps.topcoder.com/bugs/secure/IssueNavigator.jspa?reset=true&amp;jqlQuery=project+%3D+BUGHUNTDATAHUNTER+AND+status+%3D+Open+ORDER+BY+priority+DESC"">J</a><a href=""http://apps.topcoder.com/bugs/secure/IssueNavigator.jspa?reset=true&amp;jqlQuery=project+%3D+BUGHUNTDATAHUNTER+AND+status+%3D+Open+ORDER+BY+priority+DESC"">IRA List of issues</a></span></li> </ul>  <h3><span style=""color:rgb(255; 0; 0)"">Testing</span></h3>  <p><span style=""font-size:12px"">If any changes are made to the backend code; you should update the corresponding unit tests.</span></p>  <h2><span style=""color:rgb(255; 0; 0)"">Technology Overview</span></h2>  <p><span style=""font-size:12px"">The working environment requirement details for this application are outlined in the Application Design Specification. An overview of the environment requirements are listed below:</span></p>  <ul> 	<li><span style=""font-size:12px"">Java 6</span></li> 	<li><span style=""font-size:12px"">Java EE 6</span></li> 	<li><span style=""font-size:12px"">HTML</span></li> 	<li><span style=""font-size:12px"">JSP</span></li> 	<li><span style=""font-size:12px"">JavaScript</span></li> 	<li><span style=""font-size:12px"">Spring Framework 3.2.8</span></li> 	<li><span style=""font-size:12px"">Hibernate 4.3.6</span></li> 	<li><span style=""font-size:12px"">Log4j 1.2.17</span></li> 	<li><span style=""font-size:12px"">H2 Database 1.3.176</span></li> 	<li><span style=""font-size:12px"">Jetty 9.2.3</span></li> 	<li><span style=""font-size:12px"">jQuery 1.11.1</span></li> 	<li><span style=""font-size:12px"">elevatezoom&nbsp;</span></li> 	<li><span style=""font-size:12px"">jCarousel</span></li> 	<li><span style=""font-size:12px"">vintageJS</span></li> 	<li><span style=""font-size:12px"">Boost::serialization</span></li> </ul>  <h2><span style=""font-size:18px"">���<span style=""color:rgb(255; 0; 0)"">Documentation &amp; Resources Provided</span></span></h2>  <p><span>Documentation and Applications that will be provided to registered members in Downloads section:</span></p>  <table class=""confluenceTable"" style=""border-collapse:collapse; border:2px solid rgb(153; 153; 153); color:rgb(102; 102; 102); font-family:arial;helvetica;verdana;sans-serif; font-size:12px; line-height:16px; margin:0px 0px 10px; padding:0px; vertical-align:top""> 	<tbody> 		<tr> 			<th style=""background-color:rgb(229; 229; 229); vertical-align:middle""><span>Name</span></th> 			<th style=""background-color:rgb(229; 229; 229); vertical-align:middle"">&nbsp;</th> 			<th style=""background-color:rgb(229; 229; 229); vertical-align:middle""><span>Description &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span></th> 		</tr> 		<tr> 			<td style=""background-color:rgb(245; 245; 245); border-color:white; vertical-align:top""><span>Architecture</span></td> 			<td style=""background-color:rgb(245; 245; 245); border-color:white; vertical-align:top"">&nbsp;</td> 			<td style=""background-color:rgb(245; 245; 245); border-color:white; vertical-align:top""><span>ADH Architecture</span></td> 		</tr> 		<tr> 			<td style=""background-color:rgb(245; 245; 245); border-color:white; vertical-align:top""><span>Storyboards</span></td> 			<td style=""background-color:rgb(245; 245; 245); border-color:white; vertical-align:top"">&nbsp;</td> 			<td style=""background-color:rgb(245; 245; 245); border-color:white; vertical-align:top""><span>provides the look &amp; feel of the ADH application</span></td> 		</tr> 		<tr> 			<td style=""background-color:rgb(245; 245; 245); border-color:white; vertical-align:top""><span>Source Code</span></td> 			<td style=""background-color:rgb(245; 245; 245); border-color:white; vertical-align:top"">&nbsp;</td> 			<td style=""background-color:rgb(245; 245; 245); border-color:white; vertical-align:top""><span>Existing Application Source Code</span></td> 		</tr> 		<tr> 			<td style=""background-color:rgb(245; 245; 245); border-color:white; vertical-align:top"">Issues List</td> 			<td style=""background-color:rgb(245; 245; 245); border-color:white; vertical-align:top"">&nbsp;</td> 			<td style=""background-color:rgb(245; 245; 245); border-color:white; vertical-align:top""><span>Issues to Fix list</span></td> 		</tr> 	</tbody> </table> ",1400,6
30048265,Hercules OnCampus TV App - App crash after browsing for awhile,First2Finish,2015-01-01T14:31:00.000-05:00,2015-01-01T12:31:00.000-07:00,2015-01-31T12:31:00.000-07:00,2015-01-31T12:36:00.000-07:00,Completed,4,1,Android,Android,"<h3>Overview</h3>  <p>The Hercules University application is a set of apps for iOS; Android; and the web; allowing users to watch live TV and On Demand videos on Universities.</p>  <p>The application this F2F refers to is the Android TV application that will allow for browsing Live TV and On Demand videos on the Android TV platform.</p>  <p>This F2F challenge applies to the *ANDROID TV* application.</p>  <h3>Code</h3>  <p>The existing code is here:</p>  <p><a href=""https://gitlab.com/team-autobots/androidtv/"">https://gitlab.com/team-autobots/androidtv/</a></p>  <p>You will need to use Android Studio to build the code.  For best performance; use the Intel Atom Android 5.0 Android TV simulator.</p>  <p>If you need code access; please request in the F2F TopCoder forum with your Gitlab username.  You will be given read-only access.</p>  <p>Please ask any questions in the TopCoder forum or on Gitlab.  Either is appropriate.</p>  <h3>Building Code</h3>  <p>There is a README.md file here that explains test accounts and how to build the app:</p>  <p><a href=""https://gitlab.com/team-autobots/androidtv/blob/master/README.md"">https://gitlab.com/team-autobots/androidtv/blob/master/README.md</a></p>  <p>Ignore the direct tickets documentation if you don���t have write access to the repository.</p>  <h3>Submission</h3>  <p>Your submission to OR should be a Git patch file that can be applied to see the fixes.  Here is documentation on how to generate a Git patch file:</p>  <p><a href=""https://ariejan.net/2009/10/26/how-to-create-and-apply-a-patch-with-git/"">https://ariejan.net/2009/10/26/how-to-create-and-apply-a-patch-with-git/</a></p>  <h3>Ticket</h3>  <p>The ticket is on Gitlab here:</p>    <p><a href=""https://gitlab.com/team-autobots/androidtv/issues/57"">https://gitlab.com/team-autobots/androidtv/issues/57</a></p>",100,30
30048266,Hercules OnCampus TV App - Scrolling in the Live TV screen,First2Finish,2015-01-01T14:31:00.000-05:00,2015-01-01T12:31:00.000-07:00,2015-01-31T12:31:00.000-07:00,2015-01-31T12:36:00.000-07:00,Completed,10,1,Android,Android,"<h3>Overview</h3>  <p>The Hercules University application is a set of apps for iOS; Android; and the web; allowing users to watch live TV and On Demand videos on Universities.</p>  <p>The application this F2F refers to is the Android TV application that will allow for browsing Live TV and On Demand videos on the Android TV platform.</p>  <p>This F2F challenge applies to the *ANDROID TV* application.</p>  <h3>Code</h3>  <p>The existing code is here:</p>  <p><a href=""https://gitlab.com/team-autobots/androidtv/"">https://gitlab.com/team-autobots/androidtv/</a></p>  <p>You will need to use Android Studio to build the code.  For best performance; use the Intel Atom Android 5.0 Android TV simulator.</p>  <p>If you need code access; please request in the F2F TopCoder forum with your Gitlab username.  You will be given read-only access.</p>  <p>Please ask any questions in the TopCoder forum or on Gitlab.  Either is appropriate.</p>  <h3>Building Code</h3>  <p>There is a README.md file here that explains test accounts and how to build the app:</p>  <p><a href=""https://gitlab.com/team-autobots/androidtv/blob/master/README.md"">https://gitlab.com/team-autobots/androidtv/blob/master/README.md</a></p>  <p>Ignore the direct tickets documentation if you don���t have write access to the repository.</p>  <h3>Submission</h3>  <p>Your submission to OR should be a Git patch file that can be applied to see the fixes.  Here is documentation on how to generate a Git patch file:</p>  <p><a href=""https://ariejan.net/2009/10/26/how-to-create-and-apply-a-patch-with-git/"">https://ariejan.net/2009/10/26/how-to-create-and-apply-a-patch-with-git/</a></p>  <h3>Ticket</h3>  <p>The ticket is on Gitlab here:</p>    <p><a href=""https://gitlab.com/team-autobots/androidtv/issues/58"">https://gitlab.com/team-autobots/androidtv/issues/58</a></p>",250,30
30048268,Hercules OnCampus TV App - Playback info panel for Live TV,First2Finish,2015-01-01T14:33:00.000-05:00,2015-01-01T12:33:00.000-07:00,2015-01-31T12:33:00.000-07:00,2015-01-31T12:39:00.000-07:00,Completed,4,1,Android,Android,"<h3>Overview</h3>  <p>The Hercules University application is a set of apps for iOS; Android; and the web; allowing users to watch live TV and On Demand videos on Universities.</p>  <p>The application this F2F refers to is the Android TV application that will allow for browsing Live TV and On Demand videos on the Android TV platform.</p>  <p>This F2F challenge applies to the *ANDROID TV* application.</p>  <h3>Code</h3>  <p>The existing code is here:</p>  <p><a href=""https://gitlab.com/team-autobots/androidtv/"">https://gitlab.com/team-autobots/androidtv/</a></p>  <p>You will need to use Android Studio to build the code.  For best performance; use the Intel Atom Android 5.0 Android TV simulator.</p>  <p>If you need code access; please request in the F2F TopCoder forum with your Gitlab username.  You will be given read-only access.</p>  <p>Please ask any questions in the TopCoder forum or on Gitlab.  Either is appropriate.</p>  <h3>Building Code</h3>  <p>There is a README.md file here that explains test accounts and how to build the app:</p>  <p><a href=""https://gitlab.com/team-autobots/androidtv/blob/master/README.md"">https://gitlab.com/team-autobots/androidtv/blob/master/README.md</a></p>  <p>Ignore the direct tickets documentation if you don���t have write access to the repository.</p>  <h3>Submission</h3>  <p>Your submission to OR should be a Git patch file that can be applied to see the fixes.  Here is documentation on how to generate a Git patch file:</p>  <p><a href=""https://ariejan.net/2009/10/26/how-to-create-and-apply-a-patch-with-git/"">https://ariejan.net/2009/10/26/how-to-create-and-apply-a-patch-with-git/</a></p>  <h3>Ticket</h3>  <p>The ticket is on Gitlab here:</p>    <p><a href=""https://gitlab.com/team-autobots/androidtv/issues/60"">https://gitlab.com/team-autobots/androidtv/issues/60</a></p>",150,30
